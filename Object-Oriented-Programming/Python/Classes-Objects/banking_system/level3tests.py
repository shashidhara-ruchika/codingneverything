
import inspect, os, sys
current_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

from timeout_decorator import timeout
import unittest
from banking_system_impl import BankingSystemImpl

""""""

class Level3Tests(unittest.TestCase):
    """
    The test suit below includes 10 tests for Level 3.

    All have the same score.
    You are not allowed to modify this file,
    but feel free to read the source code
    to better understand what is happening in every specific case.
    """

    failureException = Exception


    @classmethod
    def setUp(cls):
        cls.system = BankingSystemImpl()

    # @timeout(0.4)
    def test_level_3_case_01_basic_payment_id(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertEqual(self.system.deposit(2, 'account1', 1000), 1000)
        self.assertEqual(self.system.schedule_payment(3, 'account1', 100, 10), 'payment1')
        self.assertEqual(self.system.schedule_payment(4, 'account1', 200, 20), 'payment2')
        self.assertEqual(self.system.schedule_payment(5, 'account1', 50, 5), 'payment3')

    # @timeout(0.4)
    def test_level_3_case_02_basic_payment_performance(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertEqual(self.system.deposit(2, 'account1', 1000), 1000)
        self.assertEqual(self.system.schedule_payment(3, 'account1', 300, 10), 'payment1')
        self.assertEqual(self.system.deposit(12, 'account1', 10), 1010)
        self.assertEqual(self.system.deposit(13, 'account1', 10), 720)

    # @timeout(0.4)
    def test_level_3_case_03_payments_are_reflected_in_top_spenders(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account2'))
        self.assertTrue(self.system.create_account(3, 'account3'))
        self.assertTrue(self.system.create_account(4, 'account4'))
        self.assertEqual(self.system.deposit(5, 'account1', 1000), 1000)
        self.assertEqual(self.system.deposit(6, 'account2', 1000), 1000)
        self.assertEqual(self.system.deposit(7, 'account3', 2000), 2000)
        self.assertEqual(self.system.deposit(8, 'account4', 1000), 1000)
        self.assertEqual(self.system.schedule_payment(9, 'account1', 100, 5), 'payment1')
        self.assertEqual(self.system.schedule_payment(10, 'account2', 200, 10), 'payment2')
        self.assertEqual(self.system.schedule_payment(11, 'account3', 600, 5), 'payment3')
        self.assertEqual(self.system.schedule_payment(12, 'account4', 500, 10), 'payment4')
        self.assertIsNone(self.system.schedule_payment(13, 'account5', 500, 10))
        expected = ['account1(100)', 'account2(0)', 'account3(0)']
        self.assertEqual(self.system.top_spenders(15, 3), expected)
        expected = ['account3(600)', 'account2(200)', 'account1(100)', 'account4(0)']
        self.assertEqual(self.system.top_spenders(20, 4), expected)
        expected = ['account3(600)', 'account4(500)', 'account2(200)', 'account1(100)']
        self.assertEqual(self.system.top_spenders(25, 5), expected)
        expected = ['account3(600)', 'account4(500)', 'account2(200)', 'account1(100)']
        self.assertEqual(self.system.top_spenders(30, 4), expected)
        self.assertEqual(self.system.deposit(31, 'account1', 10), 910)
        self.assertEqual(self.system.deposit(32, 'account2', 10), 810)
        self.assertEqual(self.system.deposit(33, 'account3', 10), 1410)
        self.assertEqual(self.system.transfer(34, 'account4', 'account2', 10), 490)

    # @timeout(0.4)
    def test_level_3_case_04_cancel_payment(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertEqual(self.system.deposit(2, 'account1', 2000), 2000)
        self.assertEqual(self.system.schedule_payment(3, 'account1', 300, 10), 'payment1')
        self.assertTrue(self.system.cancel_payment(12, 'account1', 'payment1'))
        self.assertEqual(self.system.deposit(15, 'account1', 10), 2010)
        self.assertEqual(self.system.schedule_payment(16, 'account1', 300, 10), 'payment2')

    # @timeout(0.4)
    def test_level_3_case_05_insufficient_funds(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertEqual(self.system.deposit(2, 'account1', 1000), 1000)
        self.assertEqual(self.system.schedule_payment(3, 'account1', 300, 10), 'payment1')
        self.assertEqual(self.system.schedule_payment(4, 'account1', 400, 10), 'payment2')
        self.assertEqual(self.system.schedule_payment(5, 'account1', 500, 10), 'payment3')
        self.assertEqual(self.system.deposit(20, 'account1', 10), 310)

    # @timeout(0.4)
    def test_level_3_case_06_order_of_payments(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertEqual(self.system.deposit(2, 'account1', 1000), 1000)
        self.assertEqual(self.system.schedule_payment(3, 'account1', 600, 7), 'payment1')
        self.assertEqual(self.system.schedule_payment(4, 'account1', 700, 6), 'payment2')
        self.assertEqual(self.system.deposit(11, 'account1', 10), 410)

    # @timeout(0.4)
    def test_level_3_case_07_edge_cases(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account2'))
        self.assertEqual(self.system.deposit(3, 'account1', 1000), 1000)
        self.assertEqual(self.system.deposit(4, 'account2', 1000), 1000)
        self.assertIsNone(self.system.schedule_payment(5, 'account3', 100, 5))
        self.assertEqual(self.system.schedule_payment(6, 'account1', 100, 5), 'payment1')
        self.assertFalse(self.system.cancel_payment(7, 'account3', 'payment1'))
        self.assertFalse(self.system.cancel_payment(8, 'account2', 'payment1'))
        self.assertFalse(self.system.cancel_payment(9, 'account1', 'payment2'))
        self.assertEqual(self.system.deposit(11, 'account1', 10), 910)

    # @timeout(0.4)
    def test_level_3_case_08_all_operations_1(self):
        self.assertTrue(self.system.create_account(1, 'account1'))
        self.assertTrue(self.system.create_account(2, 'account2'))
        self.assertTrue(self.system.create_account(3, 'account3'))
        self.assertEqual(self.system.deposit(4, 'account1', 1000), 1000)
        self.assertEqual(self.system.deposit(5, 'account2', 2000), 2000)
        self.assertEqual(self.system.deposit(6, 'account3', 1000), 1000)
        self.assertEqual(self.system.schedule_payment(7, 'account1', 100, 5), 'payment1')
        self.assertEqual(self.system.schedule_payment(10, 'account2', 100, 5), 'payment2')
        self.assertEqual(self.system.schedule_payment(15, 'account3', 200, 5), 'payment3')
        self.assertEqual(self.system.schedule_payment(20, 'account2', 150, 15), 'payment4')
        self.assertEqual(self.system.schedule_payment(25, 'account2', 400, 5), 'payment5')
        self.assertEqual(self.system.schedule_payment(30, 'account1', 50, 20), 'payment6')
        self.assertIsNone(self.system.schedule_payment(31, 'account4', 50, 20))
        self.assertEqual(self.system.deposit(32, 'account1', 10), 910)
        self.assertFalse(self.system.cancel_payment(33, 'account1', 'payment4'))
        self.assertTrue(self.system.cancel_payment(34, 'account2', 'payment4'))
        self.assertFalse(self.system.cancel_payment(35, 'account3', 'payment3'))
        self.assertFalse(self.system.cancel_payment(36, 'account3', 'payment3'))
        expected = ['account2(500)', 'account3(200)', 'account1(100)']
        self.assertEqual(self.system.top_spenders(37, 4), expected)
        self.assertEqual(self.system.transfer(38, 'account1', 'account2', 10), 900)
        self.assertIsNone(self.system.deposit(39, 'account4', 10))
        self.assertFalse(self.system.cancel_payment(40, 'account2', 'payment6'))
        self.assertTrue(self.system.cancel_payment(41, 'account1', 'payment6'))
        self.assertEqual(self.system.transfer(65, 'account1', 'account2', 10), 890)
        self.assertFalse(self.system.cancel_payment(70, 'account2', 'payment5'))
        self.assertEqual(self.system.deposit(75, 'account1', 10), 900)
        self.assertEqual(self.system.deposit(80, 'account2', 10), 1530)
        expected = ['account2(500)', 'account3(200)', 'account1(120)']
        self.assertEqual(self.system.top_spenders(85, 5), expected)
        self.assertEqual(self.system.deposit(100, 'account1', 10), 910)
        self.assertIsNone(self.system.deposit(105, 'account4', 10))
        expected = ['account2(500)', 'account3(200)', 'account1(120)']
        self.assertEqual(self.system.top_spenders(106, 3), expected)
        self.assertEqual(self.system.deposit(200, 'account3', 1000), 1800)

    # @timeout(0.4)
    def test_level_3_case_09_all_operations_2(self):
        self.assertTrue(self.system.create_account(1, 'acc1'))
        self.assertTrue(self.system.create_account(2, 'acc2'))
        self.assertTrue(self.system.create_account(3, 'acc3'))
        self.assertTrue(self.system.create_account(4, 'acc4'))
        self.assertTrue(self.system.create_account(5, 'acc5'))
        self.assertTrue(self.system.create_account(6, 'acc6'))
        self.assertTrue(self.system.create_account(7, 'acc7'))
        self.assertTrue(self.system.create_account(8, 'acc8'))
        self.assertTrue(self.system.create_account(9, 'acc9'))
        self.assertTrue(self.system.create_account(10, 'acc10'))
        self.assertIsNone(self.system.deposit(11, 'acc0', 1240))
        self.assertEqual(self.system.deposit(12, 'acc1', 2921), 2921)
        self.assertEqual(self.system.deposit(13, 'acc2', 1932), 1932)
        self.assertEqual(self.system.deposit(14, 'acc3', 2141), 2141)
        self.assertEqual(self.system.deposit(15, 'acc4', 1683), 1683)
        self.assertEqual(self.system.deposit(16, 'acc5', 1025), 1025)
        self.assertEqual(self.system.deposit(17, 'acc6', 1149), 1149)
        self.assertEqual(self.system.deposit(18, 'acc7', 2175), 2175)
        self.assertEqual(self.system.deposit(19, 'acc8', 2530), 2530)
        self.assertEqual(self.system.deposit(20, 'acc9', 1222), 1222)
        self.assertEqual(self.system.schedule_payment(21, 'acc1', 86, 7), 'payment1')
        self.assertEqual(self.system.schedule_payment(22, 'acc10', 22, 7), 'payment2')
        self.assertEqual(self.system.schedule_payment(23, 'acc10', 12, 3), 'payment3')
        self.assertEqual(self.system.schedule_payment(24, 'acc3', 57, 3), 'payment4')
        self.assertEqual(self.system.schedule_payment(25, 'acc2', 7, 5), 'payment5')
        self.assertEqual(self.system.schedule_payment(26, 'acc4', 33, 9), 'payment6')
        self.assertEqual(self.system.schedule_payment(27, 'acc4', 28, 9), 'payment7')
        self.assertEqual(self.system.schedule_payment(28, 'acc1', 56, 6), 'payment8')
        self.assertEqual(self.system.schedule_payment(29, 'acc3', 58, 4), 'payment9')
        self.assertEqual(self.system.schedule_payment(30, 'acc4', 33, 9), 'payment10')
        self.assertEqual(self.system.schedule_payment(31, 'acc2', 166, 4), 'payment11')
        self.assertEqual(self.system.schedule_payment(32, 'acc7', 125, 3), 'payment12')
        self.assertEqual(self.system.schedule_payment(33, 'acc2', 49, 7), 'payment13')
        self.assertEqual(self.system.schedule_payment(34, 'acc6', 25, 7), 'payment14')
        self.assertEqual(self.system.schedule_payment(35, 'acc3', 94, 7), 'payment15')
        self.assertEqual(self.system.schedule_payment(36, 'acc2', 174, 4), 'payment16')
        self.assertIsNone(self.system.schedule_payment(37, 'acc0', 71, 3))
        self.assertEqual(self.system.schedule_payment(38, 'acc6', 96, 7), 'payment17')
        self.assertEqual(self.system.schedule_payment(39, 'acc6', 119, 4), 'payment18')
        self.assertEqual(self.system.schedule_payment(40, 'acc1', 148, 10), 'payment19')
        self.assertEqual(self.system.schedule_payment(41, 'acc3', 3, 4), 'payment20')
        self.assertEqual(self.system.schedule_payment(42, 'acc8', 160, 8), 'payment21')
        self.assertIsNone(self.system.schedule_payment(43, 'acc0', 46, 7))
        self.assertEqual(self.system.schedule_payment(44, 'acc4', 156, 4), 'payment22')
        self.assertIsNone(self.system.schedule_payment(45, 'acc0', 11, 6))
        self.assertEqual(self.system.schedule_payment(46, 'acc3', 159, 9), 'payment23')
        self.assertEqual(self.system.schedule_payment(47, 'acc9', 21, 8), 'payment24')
        self.assertEqual(self.system.schedule_payment(48, 'acc4', 114, 3), 'payment25')
        self.assertEqual(self.system.schedule_payment(49, 'acc10', 36, 9), 'payment26')
        self.assertEqual(self.system.schedule_payment(50, 'acc8', 102, 9), 'payment27')
        expected = ['acc2(396)', 'acc4(364)', 'acc1(290)', 'acc6(240)', 'acc3(212)', 'acc8(160)', 'acc7(125)', 'acc10(0)', 'acc5(0)', 'acc9(0)']
        self.assertEqual(self.system.top_spenders(51, 10), expected)

    # @timeout(0.4)
    def test_level_3_case_10_all_operations_3(self):
        self.assertTrue(self.system.create_account(1, 'acc0'))
        self.assertTrue(self.system.create_account(2, 'acc1'))
        self.assertTrue(self.system.create_account(3, 'acc2'))
        self.assertTrue(self.system.create_account(4, 'acc3'))
        self.assertTrue(self.system.create_account(5, 'acc4'))
        self.assertTrue(self.system.create_account(6, 'acc5'))
        self.assertTrue(self.system.create_account(7, 'acc6'))
        self.assertTrue(self.system.create_account(8, 'acc7'))
        self.assertTrue(self.system.create_account(9, 'acc8'))
        self.assertTrue(self.system.create_account(10, 'acc9'))
        self.assertEqual(self.system.deposit(11, 'acc0', 3041), 3041)
        self.assertEqual(self.system.deposit(12, 'acc1', 2014), 2014)
        self.assertEqual(self.system.deposit(13, 'acc2', 3879), 3879)
        self.assertEqual(self.system.deposit(14, 'acc3', 2375), 2375)
        self.assertEqual(self.system.deposit(15, 'acc4', 4383), 4383)
        self.assertEqual(self.system.deposit(16, 'acc5', 4015), 4015)
        self.assertEqual(self.system.deposit(17, 'acc6', 3307), 3307)
        self.assertEqual(self.system.deposit(18, 'acc7', 2942), 2942)
        self.assertEqual(self.system.deposit(19, 'acc8', 2823), 2823)
        self.assertEqual(self.system.deposit(20, 'acc9', 3199), 3199)
        self.assertEqual(self.system.schedule_payment(21, 'acc0', 116, 51), 'payment1')
        self.assertEqual(self.system.schedule_payment(22, 'acc0', 196, 43), 'payment2')
        self.assertEqual(self.system.schedule_payment(23, 'acc0', 480, 33), 'payment3')
        self.assertEqual(self.system.schedule_payment(24, 'acc1', 90, 38), 'payment4')
        self.assertEqual(self.system.schedule_payment(25, 'acc1', 48, 53), 'payment5')
        self.assertEqual(self.system.schedule_payment(26, 'acc1', 18, 37), 'payment6')
        self.assertEqual(self.system.schedule_payment(27, 'acc2', 123, 45), 'payment7')
        self.assertEqual(self.system.schedule_payment(28, 'acc2', 278, 39), 'payment8')
        self.assertEqual(self.system.schedule_payment(29, 'acc2', 228, 30), 'payment9')
        self.assertEqual(self.system.schedule_payment(30, 'acc3', 36, 53), 'payment10')
        self.assertEqual(self.system.schedule_payment(31, 'acc3', 180, 63), 'payment11')
        self.assertEqual(self.system.schedule_payment(32, 'acc3', 114, 31), 'payment12')
        self.assertEqual(self.system.schedule_payment(33, 'acc4', 59, 57), 'payment13')
        self.assertEqual(self.system.schedule_payment(34, 'acc4', 270, 58), 'payment14')
        self.assertEqual(self.system.schedule_payment(35, 'acc4', 192, 55), 'payment15')
        self.assertEqual(self.system.schedule_payment(36, 'acc5', 100, 64), 'payment16')
        self.assertEqual(self.system.schedule_payment(37, 'acc5', 360, 48), 'payment17')
        self.assertEqual(self.system.schedule_payment(38, 'acc5', 390, 68), 'payment18')
        self.assertEqual(self.system.schedule_payment(39, 'acc6', 167, 48), 'payment19')
        self.assertEqual(self.system.schedule_payment(40, 'acc6', 318, 35), 'payment20')
        self.assertEqual(self.system.schedule_payment(41, 'acc6', 504, 61), 'payment21')
        self.assertEqual(self.system.schedule_payment(42, 'acc7', 69, 52), 'payment22')
        self.assertEqual(self.system.schedule_payment(43, 'acc7', 380, 38), 'payment23')
        self.assertEqual(self.system.schedule_payment(44, 'acc7', 360, 45), 'payment24')
        self.assertEqual(self.system.schedule_payment(45, 'acc8', 125, 38), 'payment25')
        self.assertEqual(self.system.schedule_payment(46, 'acc8', 182, 50), 'payment26')
        self.assertEqual(self.system.schedule_payment(47, 'acc8', 483, 65), 'payment27')
        self.assertEqual(self.system.schedule_payment(48, 'acc9', 37, 70), 'payment28')
        self.assertEqual(self.system.schedule_payment(49, 'acc9', 382, 64), 'payment29')
        self.assertEqual(self.system.schedule_payment(50, 'acc9', 579, 37), 'payment30')
        expected = ['acc0(480)', 'acc2(228)', 'acc1(0)', 'acc3(0)', 'acc4(0)', 'acc5(0)', 'acc6(0)', 'acc7(0)', 'acc8(0)', 'acc9(0)']
        self.assertEqual(self.system.top_spenders(60, 10), expected)
        self.assertTrue(self.system.cancel_payment(70, 'acc0', 'payment1'))
        self.assertFalse(self.system.cancel_payment(71, 'acc0', 'payment2'))
        self.assertFalse(self.system.cancel_payment(72, 'acc0', 'payment3'))
        self.assertFalse(self.system.cancel_payment(73, 'acc1', 'payment4'))
        self.assertTrue(self.system.cancel_payment(74, 'acc1', 'payment5'))
        self.assertFalse(self.system.cancel_payment(75, 'acc1', 'payment6'))
        self.assertFalse(self.system.cancel_payment(76, 'acc2', 'payment7'))
        self.assertFalse(self.system.cancel_payment(77, 'acc2', 'payment8'))
        self.assertFalse(self.system.cancel_payment(78, 'acc2', 'payment9'))
        self.assertTrue(self.system.cancel_payment(79, 'acc3', 'payment10'))
        self.assertTrue(self.system.cancel_payment(80, 'acc3', 'payment11'))
        self.assertFalse(self.system.cancel_payment(81, 'acc3', 'payment12'))
        self.assertTrue(self.system.cancel_payment(82, 'acc4', 'payment13'))
        self.assertTrue(self.system.cancel_payment(83, 'acc4', 'payment14'))
        self.assertTrue(self.system.cancel_payment(84, 'acc4', 'payment15'))
        self.assertTrue(self.system.cancel_payment(85, 'acc5', 'payment16'))
        self.assertFalse(self.system.cancel_payment(86, 'acc5', 'payment17'))
        self.assertTrue(self.system.cancel_payment(87, 'acc5', 'payment18'))
        self.assertFalse(self.system.cancel_payment(88, 'acc6', 'payment19'))
        self.assertFalse(self.system.cancel_payment(89, 'acc6', 'payment20'))
        self.assertTrue(self.system.cancel_payment(90, 'acc6', 'payment21'))
        self.assertTrue(self.system.cancel_payment(91, 'acc7', 'payment22'))
        self.assertFalse(self.system.cancel_payment(92, 'acc7', 'payment23'))
        self.assertFalse(self.system.cancel_payment(93, 'acc7', 'payment24'))
        self.assertFalse(self.system.cancel_payment(94, 'acc8', 'payment25'))
        self.assertTrue(self.system.cancel_payment(95, 'acc8', 'payment26'))
        self.assertTrue(self.system.cancel_payment(96, 'acc8', 'payment27'))
        self.assertTrue(self.system.cancel_payment(97, 'acc9', 'payment28'))
        self.assertTrue(self.system.cancel_payment(98, 'acc9', 'payment29'))
        self.assertFalse(self.system.cancel_payment(99, 'acc9', 'payment30'))
        expected = ['acc7(740)', 'acc0(676)', 'acc2(629)', 'acc9(579)', 'acc6(485)', 'acc5(360)', 'acc8(125)', 'acc3(114)', 'acc1(108)', 'acc4(0)']
        self.assertEqual(self.system.top_spenders(100, 10), expected)

if __name__ == '__main__':
    unittest.main()